# Multi-stage build for Blueprint deployment (Frontend + Backend)
FROM node:20-alpine AS frontend-builder

# Set working directory
WORKDIR /app

# Copy frontend package files
COPY kemi-crypto/package*.json ./

# Install frontend dependencies
RUN npm ci

# Copy frontend source code
COPY kemi-crypto/ ./

# Build the frontend application
RUN npm run build

# Backend stage
FROM python:3.11-slim AS backend-builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy backend requirements
COPY kemi-api/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend source code
COPY kemi-api/ .

# Production stage with Nginx and Python
FROM python:3.11-slim

# Install nginx and other dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Python dependencies from backend stage
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Copy backend source code
COPY kemi-api/ .

# Copy frontend build from frontend stage
COPY --from=frontend-builder /app/dist /var/www/html

# Copy nginx configuration
COPY kemi-crypto/nginx.conf /etc/nginx/nginx.conf

# Create nginx user and set permissions
RUN chown -R nginx:nginx /var/www/html && \
    chmod -R 755 /var/www/html

# Create startup script
RUN echo '#!/bin/bash\n\
# Start nginx in background\n\
nginx\n\
\n\
# Start FastAPI backend\n\
cd /app\n\
uvicorn main:app --host 0.0.0.0 --port 8000\n\
' > /start.sh && chmod +x /start.sh

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start both nginx and backend
CMD ["/start.sh"] 